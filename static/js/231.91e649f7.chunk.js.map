{"version":3,"file":"static/js/231.91e649f7.chunk.js","mappings":"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","sources":["services/openai/openaiService.ts","webpack://blockcoinx/./src/components/openai/OpenAIAnalysis/OpenAIAnalysis.module.css?37be","components/openai/OpenAIAnalysis/OpenAIAnalysis.tsx","webpack://blockcoinx/./src/components/openai/ImageGenerator/ImageGenerator.module.css?3a0f","components/openai/ImageGenerator/ImageGenerator.tsx","webpack://blockcoinx/./src/pages/AITools/AITools.module.css?597d","pages/AITools/AITools.tsx"],"sourcesContent":["const API_URL = 'http://localhost:5758';\r\n\r\nexport interface ImageAnalysisResult {\r\n  analysis: string;\r\n  imagePath: string;\r\n}\r\n\r\nexport interface ImageGenerationResult {\r\n  imageUrl: string;\r\n  savedPath: string;\r\n  prompt: string;\r\n}\r\n\r\nexport interface ChatResult {\r\n  response: string;\r\n}\r\n\r\nclass OpenAIService {\r\n  async analyzeImage(imageFile: File): Promise<ImageAnalysisResult> {\r\n    const formData = new FormData();\r\n    formData.append('image', imageFile);\r\n\r\n    const response = await fetch(`${API_URL}/api/openai/analyze-image`, {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to analyze image');\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async generateImage(prompt: string, size: string = \"1024x1024\"): Promise<ImageGenerationResult> {\r\n    const response = await fetch(`${API_URL}/api/openai/generate-image`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ prompt, size }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to generate image');\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async chat(message: string, context?: string): Promise<ChatResult> {\r\n    const response = await fetch(`${API_URL}/api/openai/chat`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ message, context }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to process chat request');\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async getCryptoAnalysis(cryptoData: any): Promise<ChatResult> {\r\n    const context = \"You are an expert crypto analyst. Provide insights about cryptocurrency trends, market analysis, and trading opportunities.\";\r\n    const message = `Analyze this crypto data: ${JSON.stringify(cryptoData)}`;\r\n    \r\n    return this.chat(message, context);\r\n  }\r\n\r\n  async generateCryptoImages(prompt: string): Promise<ImageGenerationResult> {\r\n    const enhancedPrompt = `Cryptocurrency themed: ${prompt}. Modern, professional, digital art style with blockchain and crypto elements.`;\r\n    return this.generateImage(enhancedPrompt);\r\n  }\r\n}\r\n\r\nconst openaiService = new OpenAIService();\r\nexport default openaiService;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"OpenAIAnalysis_container__2L6DV\",\"header\":\"OpenAIAnalysis_header__Hp+Q-\",\"uploadSection\":\"OpenAIAnalysis_uploadSection__5+2na\",\"fileLabel\":\"OpenAIAnalysis_fileLabel__tNzZW\",\"fileInput\":\"OpenAIAnalysis_fileInput__R7d93\",\"uploadButton\":\"OpenAIAnalysis_uploadButton__6nlWH\",\"selectedFile\":\"OpenAIAnalysis_selectedFile__5RCll\",\"preview\":\"OpenAIAnalysis_preview__Qp+Lg\",\"analyzeButton\":\"OpenAIAnalysis_analyzeButton__NZY-f\",\"error\":\"OpenAIAnalysis_error__F3E20\",\"result\":\"OpenAIAnalysis_result__CxtOR\",\"analysisText\":\"OpenAIAnalysis_analysisText__leXSV\"};","import React, { useState } from 'react';\r\nimport openaiService, { ImageAnalysisResult } from '../../../services/openai/openaiService';\r\nimport styles from './OpenAIAnalysis.module.css';\r\n\r\ninterface OpenAIAnalysisProps {\r\n  onAnalysisComplete?: (result: ImageAnalysisResult) => void;\r\n}\r\n\r\nconst OpenAIAnalysis: React.FC<OpenAIAnalysisProps> = ({ onAnalysisComplete }) => {\r\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\r\n  const [analysisResult, setAnalysisResult] = useState<ImageAnalysisResult | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (file) {\r\n      setSelectedFile(file);\r\n      setError(null);\r\n      setAnalysisResult(null);\r\n    }\r\n  };\r\n\r\n  const handleAnalyze = async () => {\r\n    if (!selectedFile) {\r\n      setError('Please select an image file first');\r\n      return;\r\n    }\r\n\r\n    setIsAnalyzing(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await openaiService.analyzeImage(selectedFile);\r\n      setAnalysisResult(result);\r\n      onAnalysisComplete?.(result);\r\n    } catch (err) {\r\n      setError('Failed to analyze image. Please try again.');\r\n      console.error('Analysis error:', err);\r\n    } finally {\r\n      setIsAnalyzing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.header}>\r\n        <h2>AI Image Analysis</h2>\r\n        <p>Upload an image for GPT-4 Vision analysis</p>\r\n      </div>\r\n\r\n      <div className={styles.uploadSection}>\r\n        <label className={styles.fileLabel}>\r\n          <input\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            onChange={handleFileSelect}\r\n            className={styles.fileInput}\r\n          />\r\n          <div className={styles.uploadButton}>\r\n            {selectedFile ? 'Change Image' : 'Choose Image'}\r\n          </div>\r\n        </label>\r\n\r\n        {selectedFile && (\r\n          <div className={styles.selectedFile}>\r\n            <img\r\n              src={URL.createObjectURL(selectedFile)}\r\n              alt=\"Selected\"\r\n              className={styles.preview}\r\n            />\r\n            <p>{selectedFile.name}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <button\r\n        onClick={handleAnalyze}\r\n        disabled={!selectedFile || isAnalyzing}\r\n        className={styles.analyzeButton}\r\n      >\r\n        {isAnalyzing ? 'Analyzing...' : 'Analyze Image'}\r\n      </button>\r\n\r\n      {error && (\r\n        <div className={styles.error}>\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      {analysisResult && (\r\n        <div className={styles.result}>\r\n          <h3>Analysis Result</h3>\r\n          <div className={styles.analysisText}>\r\n            {analysisResult.analysis}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OpenAIAnalysis;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ImageGenerator_container__evbwH\",\"header\":\"ImageGenerator_header__gEio8\",\"inputSection\":\"ImageGenerator_inputSection__hAG6W\",\"promptSection\":\"ImageGenerator_promptSection__RczEw\",\"label\":\"ImageGenerator_label__Awekz\",\"promptInput\":\"ImageGenerator_promptInput__LwnWM\",\"sizeSection\":\"ImageGenerator_sizeSection__CTnco\",\"sizeSelect\":\"ImageGenerator_sizeSelect__VP3pL\",\"generateButton\":\"ImageGenerator_generateButton__ZF3f1\",\"presets\":\"ImageGenerator_presets__eDa8L\",\"presetGrid\":\"ImageGenerator_presetGrid__RGCzW\",\"presetButton\":\"ImageGenerator_presetButton__qEG-O\",\"error\":\"ImageGenerator_error__QP89Y\",\"result\":\"ImageGenerator_result__eIs0g\",\"imageContainer\":\"ImageGenerator_imageContainer__-o7Do\",\"generatedImg\":\"ImageGenerator_generatedImg__bZkl4\",\"imageInfo\":\"ImageGenerator_imageInfo__cOkq0\"};","import React, { useState } from 'react';\r\nimport openaiService, { ImageGenerationResult } from '../../../services/openai/openaiService';\r\nimport styles from './ImageGenerator.module.css';\r\n\r\ninterface ImageGeneratorProps {\r\n  onImageGenerated?: (result: ImageGenerationResult) => void;\r\n}\r\n\r\nconst ImageGenerator: React.FC<ImageGeneratorProps> = ({ onImageGenerated }) => {\r\n  const [prompt, setPrompt] = useState('');\r\n  const [size, setSize] = useState('1024x1024');\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [generatedImage, setGeneratedImage] = useState<ImageGenerationResult | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleGenerate = async () => {\r\n    if (!prompt.trim()) {\r\n      setError('Please enter a prompt');\r\n      return;\r\n    }\r\n\r\n    setIsGenerating(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await openaiService.generateCryptoImages(prompt);\r\n      setGeneratedImage(result);\r\n      onImageGenerated?.(result);\r\n    } catch (err) {\r\n      setError('Failed to generate image. Please try again.');\r\n      console.error('Generation error:', err);\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const presetPrompts = [\r\n    'Bitcoin golden coin with blockchain network background',\r\n    'Ethereum cryptocurrency with digital circuits',\r\n    'Futuristic crypto trading dashboard',\r\n    'Digital wallet with various cryptocurrencies',\r\n    'Blockchain network visualization',\r\n    'Crypto mining farm with modern equipment'\r\n  ];\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.header}>\r\n        <h2>AI Image Generator</h2>\r\n        <p>Generate crypto-themed images with DALL-E 3</p>\r\n      </div>\r\n\r\n      <div className={styles.inputSection}>\r\n        <div className={styles.promptSection}>\r\n          <label className={styles.label}>Image Prompt</label>\r\n          <textarea\r\n            value={prompt}\r\n            onChange={(e) => setPrompt(e.target.value)}\r\n            placeholder=\"Describe the crypto-themed image you want to generate...\"\r\n            className={styles.promptInput}\r\n            rows={3}\r\n          />\r\n        </div>\r\n\r\n        <div className={styles.sizeSection}>\r\n          <label className={styles.label}>Image Size</label>\r\n          <select\r\n            value={size}\r\n            onChange={(e) => setSize(e.target.value)}\r\n            className={styles.sizeSelect}\r\n          >\r\n            <option value=\"1024x1024\">Square (1024x1024)</option>\r\n            <option value=\"1792x1024\">Landscape (1792x1024)</option>\r\n            <option value=\"1024x1792\">Portrait (1024x1792)</option>\r\n          </select>\r\n        </div>\r\n\r\n        <button\r\n          onClick={handleGenerate}\r\n          disabled={!prompt.trim() || isGenerating}\r\n          className={styles.generateButton}\r\n        >\r\n          {isGenerating ? 'Generating...' : 'Generate Image'}\r\n        </button>\r\n      </div>\r\n\r\n      <div className={styles.presets}>\r\n        <h3>Quick Prompts</h3>\r\n        <div className={styles.presetGrid}>\r\n          {presetPrompts.map((presetPrompt, index) => (\r\n            <button\r\n              key={index}\r\n              onClick={() => setPrompt(presetPrompt)}\r\n              className={styles.presetButton}\r\n            >\r\n              {presetPrompt}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className={styles.error}>\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      {generatedImage && (\r\n        <div className={styles.result}>\r\n          <h3>Generated Image</h3>\r\n          <div className={styles.imageContainer}>\r\n            <img\r\n              src={generatedImage.imageUrl}\r\n              alt={generatedImage.prompt}\r\n              className={styles.generatedImg}\r\n            />\r\n          </div>\r\n          <div className={styles.imageInfo}>\r\n            <p><strong>Prompt:</strong> {generatedImage.prompt}</p>\r\n            <p><strong>Saved to:</strong> {generatedImage.savedPath}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGenerator;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AITools_container__QDXhc\",\"header\":\"AITools_header__IVGUC\",\"toastDemo\":\"AITools_toastDemo__LS+4E\",\"demoButton\":\"AITools_demoButton__Lk1YE\",\"toolsGrid\":\"AITools_toolsGrid__o8Bkp\",\"toolSection\":\"AITools_toolSection__qDh28\",\"features\":\"AITools_features__J6jYh\",\"featureGrid\":\"AITools_featureGrid__U38hB\",\"featureCard\":\"AITools_featureCard__BWZ1r\",\"featureIcon\":\"AITools_featureIcon__HaDWs\"};","import React from 'react';\r\nimport OpenAIAnalysis from '../../components/openai/OpenAIAnalysis';\r\nimport ImageGenerator from '../../components/openai/ImageGenerator';\r\nimport { useToast } from '../../components/common/Toast';\r\nimport styles from './AITools.module.css';\r\n\r\nconst AITools: React.FC = () => {\r\n  const { success, error, warning, info } = useToast();\r\n\r\n  const showToastDemo = (type: string) => {\r\n    switch (type) {\r\n      case 'success':\r\n        success('Success!', 'AI tool executed successfully');\r\n        break;\r\n      case 'error':\r\n        error('Error!', 'Failed to process AI request');\r\n        break;\r\n      case 'warning':\r\n        warning('Warning!', 'API rate limit approaching');\r\n        break;\r\n      case 'info':\r\n        info('Info', 'New AI features available');\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.header}>\r\n        <h1>AI-Powered Tools</h1>\r\n        <p>Leverage cutting-edge AI technology for crypto analysis and content generation</p>\r\n        \r\n        {/* Toast Demo Buttons */}\r\n        <div className={styles.toastDemo}>\r\n          <button onClick={() => showToastDemo('success')} className={styles.demoButton}>\r\n            Success Toast\r\n          </button>\r\n          <button onClick={() => showToastDemo('error')} className={styles.demoButton}>\r\n            Error Toast\r\n          </button>\r\n          <button onClick={() => showToastDemo('warning')} className={styles.demoButton}>\r\n            Warning Toast\r\n          </button>\r\n          <button onClick={() => showToastDemo('info')} className={styles.demoButton}>\r\n            Info Toast\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.toolsGrid}>\r\n        <div className={styles.toolSection}>\r\n          <ImageGenerator />\r\n        </div>\r\n        \r\n        <div className={styles.toolSection}>\r\n          <OpenAIAnalysis />\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.features}>\r\n        <h2>AI Features</h2>\r\n        <div className={styles.featureGrid}>\r\n          <div className={styles.featureCard}>\r\n            <div className={styles.featureIcon}>🎨</div>\r\n            <h3>Image Generation</h3>\r\n            <p>Create stunning crypto-themed images using DALL-E 3 AI technology</p>\r\n          </div>\r\n          \r\n          <div className={styles.featureCard}>\r\n            <div className={styles.featureIcon}>👁️</div>\r\n            <h3>Vision Analysis</h3>\r\n            <p>Analyze images with GPT-4 Vision for detailed insights and descriptions</p>\r\n          </div>\r\n          \r\n          <div className={styles.featureCard}>\r\n            <div className={styles.featureIcon}>💡</div>\r\n            <h3>Smart Insights</h3>\r\n            <p>Get AI-powered analysis of cryptocurrency trends and market data</p>\r\n          </div>\r\n          \r\n          <div className={styles.featureCard}>\r\n            <div className={styles.featureIcon}>💾</div>\r\n            <h3>Auto-Save</h3>\r\n            <p>Generated images and analysis are automatically saved for future reference</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AITools;\r\n"],"names":["API_URL","analyzeImage","imageFile","formData","FormData","append","response","fetch","method","body","ok","Error","json","generateImage","prompt","size","arguments","length","undefined","headers","JSON","stringify","chat","message","context","getCryptoAnalysis","cryptoData","this","generateCryptoImages","enhancedPrompt","_ref","onAnalysisComplete","selectedFile","setSelectedFile","useState","isAnalyzing","setIsAnalyzing","analysisResult","setAnalysisResult","error","setError","_jsxs","className","styles","children","_jsx","type","accept","onChange","event","_event$target$files","file","target","files","src","URL","createObjectURL","alt","name","onClick","async","result","openaiService","err","console","disabled","analysis","onImageGenerated","setPrompt","setSize","isGenerating","setIsGenerating","generatedImage","setGeneratedImage","value","e","placeholder","rows","trim","map","presetPrompt","index","imageUrl","savedPath","AITools","success","warning","info","useToast","showToastDemo","ImageGenerator","OpenAIAnalysis"],"sourceRoot":""}